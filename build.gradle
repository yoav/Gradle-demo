/**
* There are 2 ways to activate the Artifactory Build-Info plugin.
* 1. use apply from directly from the build.gradle as shown below.
* 2. use the init script "gradle --init-script init.gradle" ATTENTION: Check the URL inside this init.gradle
* 3. Copy the init.gradle to your ~/.gradle directory and execute normally. ATTENTION: Now the Artifactory URL will
* always be applied to all your projects.
*
* Check the URL that apply uses to get the remote script
*
*/

buildscript {
  repositories {
    maven { //url "http://repo.jfrog.org/artifactory/gradle"
      url "http://repo-demo:9090/artifactory/gradle"
      credentials {
         username = "${artifactory_user}"
         password = "${artifactory_password}"
      }
    }
    dependencies {
      classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '2.0.14')
    }
    
  }
}

import java.text.DateFormat
import java.text.SimpleDateFormat

def globalVersion = new Version(currentVersion)

allprojects {
  apply plugin: 'artifactory'
  apply plugin: 'idea'
  configure(subprojects.findAll { new File(it.projectDir, 'src').directory }) {
    apply plugin: 'java'
  }
  group = 'org.jfrog.example.gradle'
  version = globalVersion
  status = version.status

}

artifactoryPublish.skip = true

subprojects {
  apply plugin: 'maven'

  if (project.plugins.hasPlugin('java')) {
    manifest.mainAttributes(provider: 'gradle')
    configurations {
      published
    }
    dependencies {
      testCompile 'junit:junit:4.7'
    }

    task sourceJar(type: Jar) {
      from sourceSets.main.allSource
      classifier = 'sources'
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
      classifier = 'javadoc'
      from javadoc.destinationDir
    }

    artifactoryPublish {
      dependsOn sourceJar, javadocJar
    }
    // Add the sourceJars to non-extractor modules
    artifacts {
      published sourceJar
      published javadocJar
    }
  }


}

configurations {
  published
}


artifactory {
  //contextUrl = 'http://repo.jfrog.org/artifactory'
  contextUrl = 'http://repo-demo:8080/artifactory'
  publish {
    repository {
      repoKey = 'gradle-snapshot-local' //The Artifactory repository key to publish to
      username = "${artifactory_user}" //The publisher user name
      password = "${artifactory_password}" //The publisher password
      ivy {
        //Optional section for configuring Ivy publication (when publishIvy = true). Assumes Maven repo layout if If not specified
        ivyLayout = '[organization]/[module]/ivy-[revision].xml'
        artifactLayout = '[organization]/[module]/[revision]/[module]-[revision](-[classifier]).[ext]'
        mavenCompatible = false //Convert any dots in an [organization] layout value to path separators, similar to Maven's groupId-to-path conversion. True if not specified
      }
    }
    defaults {
      publishConfigs('archives', 'published')
      properties = ['build.status': "$it.project.status".toString()]
      publishPom = false //Publish generated POM files to Artifactory (true by default)
      publishIvy = true //Publish generated Ivy descriptor files to Artifactory (true by default)
    }
  }
  resolve {
    repository {
      repoKey = 'libs-release' //The Artifactory (preferably virtual) repository key to resolve from
      username = "${artifactory_user}" //Optional resolver user name (leave out to use anonymous resolution)
      password = "${artifactory_password}" //The resolver password

    }
  }
}

//evaluationDependsOnChildren()

task wrapper(type: Wrapper) {
  gradleVersion = '1.0-milestone-8'
}

class Version {
  String originalVersion
  String thisVersion
  String status
  Date buildTime

  Version(String versionValue) {
    buildTime = new Date()
    originalVersion = versionValue
    if (originalVersion.endsWith('-SNAPSHOT')) {
      status = 'integration'
      thisVersion = originalVersion.substring(0, originalVersion.length() - 'SNAPSHOT'.length()) + getTimestamp()
    } else {
      status = 'release'
      thisVersion = versionValue
    }
  }

  String getTimestamp() {
    // Convert local file timestamp to UTC
    def format = new SimpleDateFormat('yyyyMMddHHmmss')
    format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')));
    return format.format(buildTime)
  }

  String toString() {
    thisVersion
  }
}